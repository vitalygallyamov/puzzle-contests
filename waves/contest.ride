{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let LastContestIdKey = "last_contest_id"
let ContestPrefix = "contest_"

let Status_Draft = "draft"
let Status_Active = "active"
let Status_Stop = "stop"
let Status_Delted = "deleted"
let Status_Finish = "finish"

# calc prize found string from payments
func calcPrizeFund(payments: List[AttachedPayment]) = {
  func calc(accum: List[String], next: AttachedPayment) = {
    let assetName = match (next.assetId) {
        case t:ByteVector => toBase58String(t)
        case _ => "WAVES"
      }
    if (assetName.size() > 0 && next.amount > 0) then {
      accum :+ (assetName + ":" + next.amount.toString())
    } else accum
  }
  (FOLD<10>(payments, [], calc)).makeString_2C("|")
}

# calc prize found string from payments
func getPrizeTransfers(prizeFundStr: String, recipient: Address) = {
  func calc(accum: List[ScriptTransfer], next: String) = {
    let parts = next.split(":")
    let assetId = if (parts[0] == "WAVES") then unit else parts[0].fromBase58String()
    accum :+ ScriptTransfer(recipient, parts[1].parseInt().value(), assetId)
  }
  FOLD<10>(prizeFundStr.split_4C("|"), [], calc)
}

# gen randomNumber
func getRandomNumber(variants: Int, txId: ByteVector, blockHeight: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(blockHeight-1).value()
  let randomHash = sha256(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset*8) % variants
}

@Callable(i)
func create(name: String, desc: String, endHeight: Int, tasks: List[String]) = {
  let prizeFundStr = calcPrizeFund(i.payments)
  if (prizeFundStr.size() == 0) then throw("No payments")
  else if (tasks.size() == 0) then throw("Tasks list empty")
  else if (name.size() == 0) then throw("Name empty")
  else if (desc.size() == 0) then throw("Desc empty")
  else if (endHeight < height) then throw("Invalid date end")
  else {
    let contestId = getInteger(LastContestIdKey).valueOrElse(1)
    ([
      StringEntry(ContestPrefix + contestId.toString() +  "_name", name),
      StringEntry(ContestPrefix + contestId.toString() +  "_desc", desc),
      IntegerEntry(ContestPrefix + contestId.toString() +  "_startHeight", height),
      IntegerEntry(ContestPrefix + contestId.toString() +  "_endHeight", endHeight),
      StringEntry(ContestPrefix + contestId.toString() +  "_owner", i.caller.toString()),
      StringEntry(ContestPrefix + contestId.toString() +  "_prizeFund", prizeFundStr),
      StringEntry(ContestPrefix + contestId.toString() +  "_tasks", tasks.makeString_2C(";")),
      StringEntry(ContestPrefix + contestId.toString() +  "_status", Status_Active),

      IntegerEntry(LastContestIdKey, contestId + 1)
    ], contestId)
  }
}

@Callable(i)
func participate(contestId: String) = {
  let ContestIdStr = ContestPrefix + contestId
  let ContestParticipantPrefix = ContestIdStr + "_participant_" + i.caller.toString()
  let ContestParticipantAddressKey = ContestParticipantPrefix + "_address"

  let isOwner = match (getString(ContestIdStr + "_owner")) {
    case t:String => t == i.caller.toString()
    case _ => throw("Data get owner error")
  }
  let isExist = match (getString(ContestParticipantAddressKey)) {
    case t:String => true
    case _ => false
  }
  let participantsCount = getInteger(ContestIdStr + "_participantsCount").valueOrElse(0)

  if (isOwner) then throw("Owner cannot participate")
  else if (isExist) then throw("You are already participating")
  else
  [
    StringEntry(ContestParticipantAddressKey, i.caller.toString()),
    IntegerEntry(ContestParticipantPrefix + "_startedAt", height),
    IntegerEntry(ContestIdStr +  "_participantsCount", participantsCount + 1)
  ]
}

@Callable(i)
func unparticipate(contestId: String) = {
  let ContestIdStr = ContestPrefix + contestId
  let ContestParticipantPrefix = ContestIdStr + "_participant_" + i.caller.toString()
  let ContestParticipantAddressKey = ContestParticipantPrefix + "_address"

  let isExist = match (getString(ContestParticipantAddressKey)) {
    case t:String => true
    case _ => false
  }
  let participantsCount = getInteger(ContestIdStr + "_participantsCount").valueOrElse(0)

  if (!isExist) then throw("You are not participating")
  else
  [
    DeleteEntry(ContestParticipantAddressKey),
    DeleteEntry(ContestParticipantPrefix + "_startedAt"),
    if (participantsCount - 1 == 0) then
      DeleteEntry(ContestIdStr +  "_participantsCount") else
      IntegerEntry(ContestIdStr +  "_participantsCount", participantsCount - 1)
  ]
}

@Callable(i)
func chooseWinner(contestId: String, addresses: List[String]) = {
  let ContestIdStr = ContestPrefix + contestId

  # let status = getString(ContestIdStr + "_status").valueOrErrorMessage("Status not found")
  let prizeFundStr = getString(ContestIdStr + "_prizeFund").valueOrErrorMessage("Prize fund data not found")
  let isOwner = match (getString(ContestIdStr + "_owner")) {
      case t:String => t == i.caller.toString()
      case _ => throw("Data get owner error")
    }

  let winnerIndex = getRandomNumber(addresses.size(), i.transactionId, height, 0)
  let winnerAddressStr = addresses[winnerIndex].valueOrErrorMessage("Invalid winner address")

  let isWinnerParticipate = match (getString(ContestIdStr + "_participant_" + winnerAddressStr + "_address")) {
      case t:String => true
      case _ => false
    }
  
  let endHeight = getInteger(ContestIdStr + "_endHeight").valueOrErrorMessage("No end height contest")

  if (!isOwner) then throw("You are not the owner")
  else if (endHeight < height) then throw("Contest hasn't ended yet")
  else if (!isWinnerParticipate) then throw("Winnder's address didn't participate")
  else if (addresses.size() == 0) then throw("Address list is empty")
  else
  [
    StringEntry("winner_" + winnerAddressStr + "_" + ContestIdStr + "_prizeFund", prizeFundStr),
    StringEntry(ContestIdStr +  "_winnerAddress", winnerAddressStr),
    StringEntry(ContestIdStr +  "_status", Status_Finish)
  ] ++ getPrizeTransfers(prizeFundStr, Address(fromBase58String(winnerAddressStr)))
}

@Callable(i)
func remove(contestId: String) = {
  let ContestIdStr = ContestPrefix + contestId

  # let status = getString(ContestIdStr + "_status").valueOrErrorMessage("Status not found")
  let participantsCount = getInteger(ContestIdStr + "_participantsCount").valueOrElse(0)
  let prizeFundStr = getString(ContestIdStr + "_prizeFund").valueOrErrorMessage("Prize fund data not found")
  let isOwner = match (getString(ContestIdStr + "_owner")) {
      case t:String => t == i.caller.toString()
      case _ => throw("Data get owner error")
    }

  if (!isOwner) then throw("You are not the owner")
  else if (participantsCount > 0) then throw("The number of participants is greater than zero")
  else
  [
    DeleteEntry(ContestIdStr +  "_name"),
    DeleteEntry(ContestIdStr +  "_desc"),
    DeleteEntry(ContestIdStr +  "_startHeight"),
    DeleteEntry(ContestIdStr +  "_endHeight"),
    DeleteEntry(ContestIdStr +  "_owner"),
    DeleteEntry(ContestIdStr +  "_prizeFund"),
    DeleteEntry(ContestIdStr +  "_tasks"),
    DeleteEntry(ContestIdStr +  "_status"),
    DeleteEntry(ContestIdStr + "_participantsCount")
  ] ++ getPrizeTransfers(prizeFundStr, i.caller)
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        